#pragma once
#include "GerstnerWave.usf"

//Calculates Normals For Gerstner Waves

float Wi = (2/WaveLength);
float Wa = Wi * Amplitude;
float phaseIT = Speed * Wi * Time;
float Qi = Steepness / (Wi * Amplitude * NumberOfWaves);
float3 Dir3 = float3(Direction, 1.0);

float S = sin(Wi * dot(Dir3, Gerstner) + phaseIT);
float C = cos(Wi * dot(Dir3, Gerstner) + phaseIT);

//Binormals
float BinormalX = (Qi * pow(Dir3.x, 2) * Wa * S);
float BinormalY = (Qi * Dir3.x * Dir3.y * Wa * S);
float BinormalZ = (Dir3.x * Wa * C);

float3 Binormal = float3(BinormalX, BinormalY, BinormalZ);

//Tangents
float TangentX = (Qi * Dir3.x * Dir3.y * Wa * S);
float TangentY = (Qi * pow(Dir3.y, 2) * Wa * S);
float TangentZ = (Dir3.y * Wa * C);

float3 Tangent = float3(TangentX, TangentY, TangentZ);

float3 BinormalFinal;
float3 TangentFinal;

return normalize(cross(Binormal, Tangent));
